#!/usr/bin/env python
"""
Script de v√©rification de la configuration MySQL pour ETRAGC SARLU
V√©rifie que tous les param√®tres MySQL sont correctement configur√©s
"""

import os
import sys
from pathlib import Path

# Ajouter le r√©pertoire du projet au path
BASE_DIR = Path(__file__).resolve().parent
sys.path.append(str(BASE_DIR))

# Charger les variables d'environnement
from dotenv import load_dotenv
load_dotenv()

def check_mysql_config():
    """V√©rifie la configuration MySQL"""
    
    print("=" * 60)
    print("V√âRIFICATION DE LA CONFIGURATION MYSQL")
    print("=" * 60)
    print()
    
    # R√©cup√©rer les variables d'environnement
    db_engine = os.getenv('DB_ENGINE', '')
    db_name = os.getenv('DB_NAME', '')
    db_user = os.getenv('DB_USER', '')
    db_password = os.getenv('DB_PASSWORD', '')
    db_host = os.getenv('DB_HOST', '')
    db_port = os.getenv('DB_PORT', '')
    
    # V√©rifier le moteur de base de donn√©es
    print("1. Moteur de base de donn√©es")
    print(f"   DB_ENGINE: {db_engine}")
    if 'mysql' in db_engine.lower():
        print("   ‚úì MySQL configur√©")
    else:
        print("   ‚úó MySQL n'est pas configur√©")
        print("   ‚Üí Modifiez DB_ENGINE dans .env")
        return False
    print()
    
    # V√©rifier les param√®tres de connexion
    print("2. Param√®tres de connexion")
    errors = []
    
    if not db_name:
        errors.append("DB_NAME n'est pas d√©fini")
    else:
        print(f"   ‚úì DB_NAME: {db_name}")
    
    if not db_user:
        errors.append("DB_USER n'est pas d√©fini")
    else:
        print(f"   ‚úì DB_USER: {db_user}")
    
    if not db_password:
        errors.append("DB_PASSWORD n'est pas d√©fini")
    else:
        print(f"   ‚úì DB_PASSWORD: {'*' * len(db_password)} (masqu√©)")
    
    if not db_host:
        errors.append("DB_HOST n'est pas d√©fini")
    else:
        print(f"   ‚úì DB_HOST: {db_host}")
    
    if not db_port:
        errors.append("DB_PORT n'est pas d√©fini")
    else:
        print(f"   ‚úì DB_PORT: {db_port}")
    
    if errors:
        print()
        print("   Erreurs d√©tect√©es:")
        for error in errors:
            print(f"   ‚úó {error}")
        return False
    print()
    
    # V√©rifier si c'est PythonAnywhere
    print("3. Type d'h√©bergement")
    if 'pythonanywhere' in db_host.lower():
        print("   ‚úì Configuration PythonAnywhere d√©tect√©e")
        print(f"   ‚Üí Assurez-vous d'ex√©cuter ce code sur PythonAnywhere")
        print(f"   ‚Üí Les comptes gratuits ne peuvent se connecter que depuis PythonAnywhere")
    else:
        print("   ‚Ñπ Configuration locale ou serveur personnalis√©")
    print()
    
    # Tester la connexion
    print("4. Test de connexion √† la base de donn√©es")
    try:
        import django
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
        django.setup()
        
        from django.db import connection
        
        with connection.cursor() as cursor:
            cursor.execute("SELECT VERSION()")
            version = cursor.fetchone()[0]
            print(f"   ‚úì Connexion r√©ussie!")
            print(f"   ‚Ñπ Version MySQL: {version}")
        
        # V√©rifier les tables
        cursor = connection.cursor()
        cursor.execute("SHOW TABLES")
        tables = cursor.fetchall()
        
        if tables:
            print(f"   ‚úì {len(tables)} table(s) trouv√©e(s) dans la base de donn√©es")
        else:
            print("   ‚ö† Aucune table trouv√©e")
            print("   ‚Üí Ex√©cutez: python manage.py migrate")
        
        return True
        
    except ImportError as e:
        print(f"   ‚úó Erreur d'import: {e}")
        print("   ‚Üí Installez les d√©pendances: pip install -r requirements.txt")
        return False
        
    except Exception as e:
        print(f"   ‚úó Erreur de connexion: {e}")
        print()
        print("   V√©rifications √† faire:")
        print("   1. Le serveur MySQL est-il d√©marr√©?")
        print("   2. Les identifiants sont-ils corrects?")
        print("   3. La base de donn√©es existe-t-elle?")
        print("   4. mysqlclient ou pymysql est-il install√©?")
        print()
        print("   Commandes utiles:")
        print("   - Installer mysqlclient: pip install mysqlclient")
        print("   - Installer pymysql: pip install pymysql")
        print("   - V√©rifier Django: python manage.py check")
        return False

def show_pythonanywhere_info():
    """Affiche les informations sp√©cifiques √† PythonAnywhere"""
    print()
    print("=" * 60)
    print("INFORMATIONS PYTHONANYWHERE")
    print("=" * 60)
    print()
    print("Configuration attendue pour PythonAnywhere:")
    print()
    print("DB_ENGINE=django.db.backends.mysql")
    print("DB_NAME=ETRAGCSARLU$par d√©faut")
    print("DB_USER=ETRAGCSARLU")
    print("DB_PASSWORD=votre_mot_de_passe_mysql")
    print("DB_HOST=ETRAGCSARLU.mysql.pythonanywhere-services.com")
    print("DB_PORT=3306")
    print()
    print("‚ö†Ô∏è  IMPORTANT:")
    print("- Le mot de passe MySQL doit √™tre diff√©rent du mot de passe PythonAnywhere")
    print("- Avec un compte gratuit, la connexion MySQL ne fonctionne que depuis PythonAnywhere")
    print("- Le nom de la base de donn√©es doit commencer par 'ETRAGCSARLU$'")
    print()
    print("üìö Documentation:")
    print("- Voir PYTHONANYWHERE_SETUP.md pour le guide complet")
    print()

def main():
    """Fonction principale"""
    
    # V√©rifier si le fichier .env existe
    env_file = BASE_DIR / '.env'
    if not env_file.exists():
        print("=" * 60)
        print("ERREUR: Fichier .env introuvable")
        print("=" * 60)
        print()
        print("Le fichier .env n'existe pas dans le r√©pertoire du projet.")
        print()
        print("Actions √† faire:")
        print("1. Copiez .env.example vers .env:")
        print("   cp .env.example .env")
        print()
        print("2. Modifiez .env avec vos param√®tres MySQL")
        print()
        return
    
    # V√©rifier la configuration
    success = check_mysql_config()
    
    # Afficher les informations PythonAnywhere si applicable
    db_host = os.getenv('DB_HOST', '')
    if 'pythonanywhere' in db_host.lower():
        show_pythonanywhere_info()
    
    # R√©sum√©
    print("=" * 60)
    if success:
        print("‚úì CONFIGURATION MYSQL VALIDE")
        print()
        print("Prochaines √©tapes:")
        print("1. python manage.py migrate")
        print("2. python manage.py createsuperuser")
        print("3. python manage.py runserver")
    else:
        print("‚úó CONFIGURATION MYSQL INVALIDE")
        print()
        print("Consultez les messages ci-dessus pour corriger les erreurs.")
    print("=" * 60)

if __name__ == '__main__':
    main()
