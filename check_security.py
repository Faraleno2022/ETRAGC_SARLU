"""
Script de v√©rification de la s√©curit√© du projet ETRAGC
Usage: python check_security.py
"""

import os
import sys
from pathlib import Path

def print_header(title):
    print(f"\n{'='*60}")
    print(f"  {title}")
    print('='*60)

def check_env_file():
    """V√©rifie la pr√©sence et la configuration du fichier .env"""
    print_header("1. V√©rification du fichier .env")
    
    if not os.path.exists('.env'):
        print("‚ùå Fichier .env manquant!")
        print("   Copiez .env.example vers .env et configurez-le.")
        return False
    
    print("‚úì Fichier .env pr√©sent")
    
    # V√©rifier les variables critiques
    with open('.env', 'r') as f:
        content = f.read()
        
        checks = {
            'SECRET_KEY': 'SECRET_KEY' in content and 'your-secret-key' not in content,
            'DEBUG': 'DEBUG' in content,
            'ALLOWED_HOSTS': 'ALLOWED_HOSTS' in content,
            'DB_ENGINE': 'DB_ENGINE' in content,
        }
        
        for key, status in checks.items():
            if status:
                print(f"‚úì {key} configur√©")
            else:
                print(f"‚ö† {key} manquant ou non configur√©")
    
    return True

def check_secret_key():
    """V√©rifie que la SECRET_KEY est s√©curis√©e"""
    print_header("2. V√©rification de la SECRET_KEY")
    
    try:
        with open('.env', 'r') as f:
            for line in f:
                if line.startswith('SECRET_KEY'):
                    key = line.split('=')[1].strip()
                    if len(key) < 50:
                        print("‚ö† SECRET_KEY trop courte (< 50 caract√®res)")
                    elif 'your-secret-key' in key or 'change' in key.lower():
                        print("‚ùå SECRET_KEY par d√©faut d√©tect√©e!")
                        print("   G√©n√©rez une nouvelle cl√© avec:")
                        print("   python -c \"from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())\"")
                    else:
                        print("‚úì SECRET_KEY semble s√©curis√©e")
                    return
    except:
        print("‚ùå Impossible de v√©rifier la SECRET_KEY")

def check_debug_mode():
    """V√©rifie que DEBUG est False en production"""
    print_header("3. V√©rification du mode DEBUG")
    
    try:
        with open('.env', 'r') as f:
            for line in f:
                if line.startswith('DEBUG'):
                    debug = line.split('=')[1].strip().lower()
                    if debug == 'true':
                        print("‚ö† DEBUG=True d√©tect√©")
                        print("   En production, utilisez DEBUG=False")
                    else:
                        print("‚úì DEBUG=False (recommand√© pour production)")
                    return
    except:
        print("‚ùå Impossible de v√©rifier DEBUG")

def check_dependencies():
    """V√©rifie que les packages de s√©curit√© sont install√©s"""
    print_header("4. V√©rification des packages de s√©curit√©")
    
    required_packages = [
        'django-axes',
        'django-ratelimit',
        'django-csp',
        'django-cors-headers',
    ]
    
    try:
        import subprocess
        result = subprocess.run(['pip', 'list'], capture_output=True, text=True)
        installed = result.stdout.lower()
        
        for package in required_packages:
            if package.lower() in installed:
                print(f"‚úì {package} install√©")
            else:
                print(f"‚ùå {package} manquant")
                print(f"   Installez avec: pip install {package}")
    except:
        print("‚ö† Impossible de v√©rifier les packages")
        print("  Ex√©cutez: pip install -r requirements.txt")

def check_logs_directory():
    """V√©rifie que le dossier logs existe"""
    print_header("5. V√©rification du dossier logs")
    
    if os.path.exists('logs'):
        print("‚úì Dossier logs pr√©sent")
        
        # V√©rifier les permissions
        if os.access('logs', os.W_OK):
            print("‚úì Dossier logs accessible en √©criture")
        else:
            print("‚ùå Dossier logs non accessible en √©criture")
    else:
        print("‚ùå Dossier logs manquant")
        print("   Cr√©ez-le avec: mkdir logs")

def check_database_security():
    """V√©rifie la configuration de la base de donn√©es"""
    print_header("6. V√©rification de la base de donn√©es")
    
    try:
        with open('.env', 'r') as f:
            content = f.read()
            
            if 'DB_ENGINE=django.db.backends.sqlite3' in content:
                print("‚ö† SQLite d√©tect√© (OK pour d√©veloppement)")
                print("  Pour production, utilisez MySQL ou PostgreSQL")
            elif 'DB_ENGINE=django.db.backends.mysql' in content:
                print("‚úì MySQL configur√©")
                
                # V√©rifier le mot de passe
                for line in content.split('\n'):
                    if line.startswith('DB_PASSWORD'):
                        pwd = line.split('=')[1].strip()
                        if not pwd or pwd == '':
                            print("‚ùå Mot de passe de base de donn√©es vide!")
                        else:
                            print("‚úì Mot de passe de base de donn√©es configur√©")
            elif 'DB_ENGINE=django.db.backends.postgresql' in content:
                print("‚úì PostgreSQL configur√©")
    except:
        print("‚ùå Impossible de v√©rifier la configuration de la base de donn√©es")

def check_allowed_hosts():
    """V√©rifie ALLOWED_HOSTS"""
    print_header("7. V√©rification de ALLOWED_HOSTS")
    
    try:
        with open('.env', 'r') as f:
            for line in f:
                if line.startswith('ALLOWED_HOSTS'):
                    hosts = line.split('=')[1].strip()
                    if 'localhost' in hosts and '127.0.0.1' in hosts:
                        print("‚ö† ALLOWED_HOSTS contient localhost/127.0.0.1")
                        print("  En production, sp√©cifiez votre domaine")
                    else:
                        print("‚úì ALLOWED_HOSTS configur√©")
                    return
    except:
        print("‚ùå Impossible de v√©rifier ALLOWED_HOSTS")

def check_gitignore():
    """V√©rifie que .env est dans .gitignore"""
    print_header("8. V√©rification de .gitignore")
    
    if os.path.exists('.gitignore'):
        with open('.gitignore', 'r') as f:
            content = f.read()
            if '.env' in content:
                print("‚úì .env est dans .gitignore")
            else:
                print("‚ùå .env n'est PAS dans .gitignore!")
                print("   Ajoutez-le imm√©diatement!")
            
            if 'logs/*.log' in content or '*.log' in content:
                print("‚úì Fichiers logs ignor√©s")
            else:
                print("‚ö† Fichiers logs non ignor√©s")
    else:
        print("‚ùå Fichier .gitignore manquant!")

def run_django_check():
    """Ex√©cute le check de s√©curit√© Django"""
    print_header("9. Django Security Check")
    
    try:
        import subprocess
        result = subprocess.run(
            ['python', 'manage.py', 'check', '--deploy'],
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            print("‚úì Aucun probl√®me d√©tect√© par Django")
        else:
            print("‚ö† Django a d√©tect√© des probl√®mes:")
            print(result.stdout)
    except:
        print("‚ö† Impossible d'ex√©cuter 'python manage.py check --deploy'")

def print_summary():
    """Affiche un r√©sum√© et des recommandations"""
    print_header("R√âSUM√â ET RECOMMANDATIONS")
    
    print("""
    üìã Checklist de S√©curit√©:
    
    [ ] SECRET_KEY unique et s√©curis√©e (50+ caract√®res)
    [ ] DEBUG=False en production
    [ ] ALLOWED_HOSTS configur√© avec votre domaine
    [ ] Base de donn√©es avec mot de passe fort
    [ ] Packages de s√©curit√© install√©s
    [ ] HTTPS activ√© (certificat SSL)
    [ ] Sauvegardes r√©guli√®res configur√©es
    [ ] Logs surveill√©s
    [ ] .env dans .gitignore
    [ ] Firewall configur√©
    
    üîí Prochaines √©tapes:
    
    1. Installer les packages:
       pip install -r requirements.txt
    
    2. Appliquer les migrations:
       python manage.py migrate
    
    3. Tester l'application:
       python manage.py runserver
    
    4. En production:
       - Activer HTTPS
       - Configurer le firewall
       - Mettre en place les sauvegardes
       - Surveiller les logs
    
    üìö Documentation:
       Consultez SECURITY.md pour plus de d√©tails
    """)

def main():
    print("""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë     V√âRIFICATION DE S√âCURIT√â - ETRAGC SARLU               ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
    
    # V√©rifier qu'on est dans le bon dossier
    if not os.path.exists('manage.py'):
        print("‚ùå Erreur: Ce script doit √™tre ex√©cut√© depuis la racine du projet")
        print("   (le dossier contenant manage.py)")
        return
    
    # Ex√©cuter toutes les v√©rifications
    check_env_file()
    check_secret_key()
    check_debug_mode()
    check_dependencies()
    check_logs_directory()
    check_database_security()
    check_allowed_hosts()
    check_gitignore()
    run_django_check()
    print_summary()
    
    print("\n‚úÖ V√©rification termin√©e!\n")

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö† V√©rification interrompue par l'utilisateur.")
    except Exception as e:
        print(f"\n\n‚ùå Erreur: {e}")
